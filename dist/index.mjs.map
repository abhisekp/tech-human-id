{"mappings":"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","sources":["index.ts"],"sourcesContent":["export const adjectives: string[] = [\n  \"afraid\", \"big\", \"better\", \"bright\", \"clear\", \"clever\", \"cold\", \"cool\", \"dark\",\n  \"deep\", \"dirty\", \"dry\", \"dull\", \"fast\", \"free\", \"fresh\", \"full\", \"green\", \"hot\",\n  \"huge\", \"light\", \"long\", \"modern\", \"neat\", \"new\", \"open\", \"public\", \"quick\",\n  \"ready\", \"sharp\", \"shiny\", \"short\", \"silent\", \"slick\", \"slow\", \"smart\", \"smooth\",\n  \"solid\", \"strong\", \"swift\", \"thin\", \"tough\", \"true\", \"vast\", \"wide\", \"wise\"\n];\n\nexport const nouns: string[] = [\n  \"algorithms\", \"applications\", \"archives\", \"arrays\", \"backends\", \"batteries\", \"binaries\", \"blocks\",\n  \"branches\", \"browsers\", \"buffers\", \"bytes\", \"cables\", \"caches\", \"cameras\", \"certificates\",\n  \"chips\", \"classes\", \"clouds\", \"clusters\", \"codes\", \"compilers\", \"components\", \"controllers\",\n  \"cores\", \"cryptos\", \"dashboards\", \"databases\", \"datasets\", \"devices\", \"displays\", \"domains\",\n  \"drivers\", \"emails\", \"engines\", \"extensions\", \"fields\", \"files\", \"folders\", \"functions\",\n  \"frameworks\", \"gateways\", \"generators\", \"graphs\", \"grids\", \"handles\", \"hardware\", \"headers\",\n  \"hosts\", \"indexes\", \"instances\", \"interfaces\", \"keys\", \"keywords\", \"libraries\", \"lines\",\n  \"links\", \"lists\", \"logs\", \"loops\", \"machines\", \"mails\", \"mainframes\", \"memories\", \"methods\",\n  \"microservices\", \"modules\", \"networks\", \"nodes\", \"objects\", \"operands\", \"operations\", \"options\",\n  \"outputs\", \"packets\", \"parameters\", \"parsers\", \"paths\", \"patterns\", \"pixels\", \"platforms\",\n  \"plugins\", \"ports\", \"processors\", \"programs\", \"projects\", \"proxies\", \"queries\", \"queues\",\n  \"records\", \"registries\", \"requests\", \"responses\", \"routers\", \"scripts\", \"sensors\", \"servers\",\n  \"services\", \"sessions\", \"settings\", \"signals\", \"sites\", \"software\", \"sources\", \"sockets\",\n  \"stacks\", \"standards\", \"storages\", \"streams\", \"strings\", \"structures\", \"subnets\", \"switches\",\n  \"systems\", \"tables\", \"tags\", \"tasks\", \"templates\", \"terminals\", \"tokens\", \"tools\", \"trees\",\n  \"types\", \"uploads\", \"urls\", \"users\", \"variables\", \"vectors\", \"views\", \"volumes\", \"websites\",\n  \"widgets\", \"windows\", \"workflows\", \"zones\"\n];\n\nexport const verbs: string[] = [\n  \"accept\", \"add\", \"allow\", \"analyze\", \"build\", \"calculate\", \"change\", \"check\",\n  \"click\", \"compile\", \"connect\", \"copy\", \"create\", \"debug\", \"delete\", \"design\",\n  \"develop\", \"download\", \"edit\", \"encode\", \"enter\", \"execute\", \"export\", \"fix\",\n  \"generate\", \"import\", \"install\", \"integrate\", \"invent\", \"join\", \"launch\",\n  \"load\", \"log\", \"make\", \"monitor\", \"move\", \"open\", \"optimize\", \"post\",\n  \"press\", \"program\", \"push\", \"read\", \"repair\", \"report\", \"reset\", \"restart\",\n  \"run\", \"save\", \"scan\", \"search\", \"select\", \"send\", \"setup\", \"share\",\n  \"start\", \"stop\", \"store\", \"stream\", \"switch\", \"sync\", \"test\", \"track\",\n  \"type\", \"update\", \"upload\", \"upgrade\", \"use\", \"view\", \"write\"\n];\n\nexport const adverbs: string[] = [\n  \"accurately\",\n  \"algorithmically\",\n  \"asynchronously\",\n  \"automatically\",\n  \"concurrently\",\n  \"consistently\",\n  \"dependably\",\n  \"digitally\",\n  \"dynamically\",\n  \"efficiently\",\n  \"fluently\",\n  \"intelligently\",\n  \"logically\",\n  \"modularly\",\n  \"optimally\",\n  \"parallelly\",\n  \"precisely\",\n  \"programmatically\",\n  \"promptly\",\n  \"rapidly\",\n  \"reliably\",\n  \"remotely\",\n  \"responsively\",\n  \"robustly\",\n  \"scalably\",\n  \"securely\",\n  \"seamlessly\",\n  \"sequentially\",\n  \"smoothly\",\n  \"statically\",\n  \"synchronously\",\n  \"virtually\",\n  \"wirelessly\"\n];\n\nfunction random(arr: string[]): string {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nfunction longest(arr: string[]) {\n  return arr.reduce((a, b) => a.length > b.length ? a : b);\n}\n\nfunction shortest(arr: string[]) {\n  return arr.reduce((a, b) => a.length < b.length ? a : b);\n}\n\nexport interface Options {\n  separator?: string;\n  capitalize?: boolean;\n  adjectiveCount?: number;\n  addAdverb?: boolean;\n}\n\n/**\n * Returns the human-id\n *\n * @param {Options|string|boolean} [options = {}]\n * @returns {string}\n */\nexport function humanId(options: Options | string | boolean = {}): string {\n  if (typeof options === \"string\") options = { separator: options };\n  if (typeof options === \"boolean\") options = { capitalize: options };\n  const {\n    separator = \"\",\n    capitalize = true,\n    adjectiveCount = 1,\n    addAdverb = false\n  } = options;\n\n  let res = [\n    ...[...Array(adjectiveCount)].map(_ => random(adjectives)),\n    random(nouns),\n    random(verbs),\n    ...((addAdverb) ? [random(adverbs)] : [])\n  ];\n\n  if (capitalize)\n    res = res.map(r => r.charAt(0).toUpperCase() + r.substr(1));\n\n  return res.join(separator);\n}\n\n/**\n * Returns the pool size for a set of options\n *\n * @param {Options} [options = {}]\n * @returns {number}\n */\nexport function poolSize(options: Options = {}): number {\n  const { adjectiveCount = 1, addAdverb = false } = options;\n  return (adjectives.length * adjectiveCount) * nouns.length * verbs.length * (addAdverb ? adverbs.length : 1);\n}\n\n/**\n * Returns the max length for a set of options\n *\n * @param {Options} [options = {}]\n * @returns {number}\n */\nexport function maxLength(options: Options = {}): number {\n  const { adjectiveCount = 1, addAdverb = false, separator = \"\" } = options;\n  return (longest(adjectives).length * adjectiveCount) +\n    (adjectiveCount * separator.length) +\n    longest(nouns).length +\n    separator.length +\n    longest(verbs).length +\n    (addAdverb ? longest(adverbs).length + separator.length : 0);\n}\n\n/**\n * Returns the min length for a set of options\n *\n * @param {Options} [options = {}]\n * @returns {number}\n */\nexport function minLength(options: Options = {}): number {\n  const { adjectiveCount = 1, addAdverb = false, separator = \"\" } = options;\n  return (shortest(adjectives).length * adjectiveCount) +\n    (adjectiveCount * separator.length) +\n    shortest(nouns).length +\n    separator.length +\n    shortest(verbs).length +\n    (addAdverb ? shortest(adverbs).length + separator.length : 0);\n}\n\nexport default humanId;"],"names":[],"version":3,"file":"index.mjs.map"}