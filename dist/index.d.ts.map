{"mappings":"AAAA,OAAO,MAAM,YAAY,MAAM,EA+C9B,CAAC;AAEF,OAAO,MAAM,OAAO,MAAM,EAwIzB,CAAC;AAEF,OAAO,MAAM,OAAO,MAAM,EAuEzB,CAAC;AAEF,OAAO,MAAM,SAAS,MAAM,EAkC3B,CAAC;AAcF;IACE,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,UAAU,CAAC,EAAE,OAAO,CAAC;IACrB,cAAc,CAAC,EAAE,MAAM,CAAC;IACxB,SAAS,CAAC,EAAE,OAAO,CAAC;CACrB;AAQD,wBAAgB,OAAO,CAAC,OAAO,GAAE,OAAO,GAAG,MAAM,GAAG,OAAY,GAAG,MAAM,CAexE;AAQD,yBAAyB,OAAO,GAAE,OAAY,GAAG,MAAM,CAGtD;AAQD,0BAA0B,OAAO,GAAE,OAAY,GAAG,MAAM,CAUvD;AAQD,0BAA0B,OAAO,GAAE,OAAY,GAAG,MAAM,CAUvD;AAED,eAAe,OAAO,CAAC","sources":["index.ts"],"sourcesContent":["export const adjectives: string[] = [\r\n  \"afraid\",\r\n  \"big\",\r\n  \"better\",\r\n  \"bright\",\r\n  \"clear\",\r\n  \"clever\",\r\n  \"cold\",\r\n  \"cool\",\r\n  \"dark\",\r\n  \"deep\",\r\n  \"dirty\",\r\n  \"dry\",\r\n  \"dull\",\r\n  \"fast\",\r\n  \"free\",\r\n  \"fresh\",\r\n  \"full\",\r\n  \"green\",\r\n  \"hot\",\r\n  \"huge\",\r\n  \"light\",\r\n  \"long\",\r\n  \"modern\",\r\n  \"neat\",\r\n  \"new\",\r\n  \"open\",\r\n  \"public\",\r\n  \"quick\",\r\n  \"ready\",\r\n  \"sharp\",\r\n  \"shiny\",\r\n  \"short\",\r\n  \"silent\",\r\n  \"slick\",\r\n  \"slow\",\r\n  \"smart\",\r\n  \"smooth\",\r\n  \"solid\",\r\n  \"strong\",\r\n  \"swift\",\r\n  \"thin\",\r\n  \"tough\",\r\n  \"true\",\r\n  \"vast\",\r\n  \"wide\",\r\n  \"wise\",\r\n];\r\n\r\nexport const nouns: string[] = [\r\n  \"algorithms\",\r\n  \"applications\",\r\n  \"archives\",\r\n  \"arrays\",\r\n  \"backends\",\r\n  \"batteries\",\r\n  \"binaries\",\r\n  \"blocks\",\r\n  \"branches\",\r\n  \"browsers\",\r\n  \"buffers\",\r\n  \"bytes\",\r\n  \"cables\",\r\n  \"caches\",\r\n  \"cameras\",\r\n  \"certificates\",\r\n  \"chips\",\r\n  \"classes\",\r\n  \"clouds\",\r\n  \"clusters\",\r\n  \"codes\",\r\n  \"compilers\",\r\n  \"components\",\r\n  \"controllers\",\r\n  \"cores\",\r\n  \"cryptos\",\r\n  \"dashboards\",\r\n  \"databases\",\r\n  \"datasets\",\r\n  \"devices\",\r\n  \"displays\",\r\n  \"domains\",\r\n  \"drivers\",\r\n  \"emails\",\r\n  \"engines\",\r\n  \"extensions\",\r\n  \"fields\",\r\n  \"files\",\r\n  \"folders\",\r\n  \"functions\",\r\n  \"frameworks\",\r\n  \"gateways\",\r\n  \"generators\",\r\n  \"graphs\",\r\n  \"grids\",\r\n  \"handles\",\r\n  \"hardware\",\r\n  \"headers\",\r\n  \"hosts\",\r\n  \"indexes\",\r\n  \"instances\",\r\n  \"interfaces\",\r\n  \"keys\",\r\n  \"keywords\",\r\n  \"libraries\",\r\n  \"lines\",\r\n  \"links\",\r\n  \"lists\",\r\n  \"logs\",\r\n  \"loops\",\r\n  \"machines\",\r\n  \"mails\",\r\n  \"mainframes\",\r\n  \"memories\",\r\n  \"methods\",\r\n  \"microservices\",\r\n  \"modules\",\r\n  \"networks\",\r\n  \"nodes\",\r\n  \"objects\",\r\n  \"operands\",\r\n  \"operations\",\r\n  \"options\",\r\n  \"outputs\",\r\n  \"packets\",\r\n  \"parameters\",\r\n  \"parsers\",\r\n  \"paths\",\r\n  \"patterns\",\r\n  \"pixels\",\r\n  \"platforms\",\r\n  \"plugins\",\r\n  \"ports\",\r\n  \"processors\",\r\n  \"programs\",\r\n  \"projects\",\r\n  \"proxies\",\r\n  \"queries\",\r\n  \"queues\",\r\n  \"records\",\r\n  \"registries\",\r\n  \"requests\",\r\n  \"responses\",\r\n  \"routers\",\r\n  \"scripts\",\r\n  \"sensors\",\r\n  \"servers\",\r\n  \"services\",\r\n  \"sessions\",\r\n  \"settings\",\r\n  \"signals\",\r\n  \"sites\",\r\n  \"software\",\r\n  \"sources\",\r\n  \"sockets\",\r\n  \"stacks\",\r\n  \"standards\",\r\n  \"storages\",\r\n  \"streams\",\r\n  \"strings\",\r\n  \"structures\",\r\n  \"subnets\",\r\n  \"switches\",\r\n  \"systems\",\r\n  \"tables\",\r\n  \"tags\",\r\n  \"tasks\",\r\n  \"templates\",\r\n  \"terminals\",\r\n  \"tokens\",\r\n  \"tools\",\r\n  \"trees\",\r\n  \"types\",\r\n  \"uploads\",\r\n  \"urls\",\r\n  \"users\",\r\n  \"variables\",\r\n  \"vectors\",\r\n  \"views\",\r\n  \"volumes\",\r\n  \"websites\",\r\n  \"widgets\",\r\n  \"windows\",\r\n  \"workflows\",\r\n  \"zones\",\r\n];\r\n\r\nexport const verbs: string[] = [\r\n  \"accept\",\r\n  \"add\",\r\n  \"allow\",\r\n  \"analyze\",\r\n  \"build\",\r\n  \"calculate\",\r\n  \"change\",\r\n  \"check\",\r\n  \"click\",\r\n  \"compile\",\r\n  \"connect\",\r\n  \"copy\",\r\n  \"create\",\r\n  \"debug\",\r\n  \"delete\",\r\n  \"design\",\r\n  \"develop\",\r\n  \"download\",\r\n  \"edit\",\r\n  \"encode\",\r\n  \"enter\",\r\n  \"execute\",\r\n  \"export\",\r\n  \"fix\",\r\n  \"generate\",\r\n  \"import\",\r\n  \"install\",\r\n  \"integrate\",\r\n  \"invent\",\r\n  \"join\",\r\n  \"launch\",\r\n  \"load\",\r\n  \"log\",\r\n  \"make\",\r\n  \"monitor\",\r\n  \"move\",\r\n  \"open\",\r\n  \"optimize\",\r\n  \"post\",\r\n  \"press\",\r\n  \"program\",\r\n  \"push\",\r\n  \"read\",\r\n  \"repair\",\r\n  \"report\",\r\n  \"reset\",\r\n  \"restart\",\r\n  \"run\",\r\n  \"save\",\r\n  \"scan\",\r\n  \"search\",\r\n  \"select\",\r\n  \"send\",\r\n  \"setup\",\r\n  \"share\",\r\n  \"start\",\r\n  \"stop\",\r\n  \"store\",\r\n  \"stream\",\r\n  \"switch\",\r\n  \"sync\",\r\n  \"test\",\r\n  \"track\",\r\n  \"type\",\r\n  \"update\",\r\n  \"upload\",\r\n  \"upgrade\",\r\n  \"use\",\r\n  \"view\",\r\n  \"write\",\r\n];\r\n\r\nexport const adverbs: string[] = [\r\n  \"accurately\",\r\n  \"algorithmically\",\r\n  \"asynchronously\",\r\n  \"automatically\",\r\n  \"concurrently\",\r\n  \"consistently\",\r\n  \"dependably\",\r\n  \"digitally\",\r\n  \"dynamically\",\r\n  \"efficiently\",\r\n  \"fluently\",\r\n  \"intelligently\",\r\n  \"logically\",\r\n  \"modularly\",\r\n  \"optimally\",\r\n  \"parallelly\",\r\n  \"precisely\",\r\n  \"programmatically\",\r\n  \"promptly\",\r\n  \"rapidly\",\r\n  \"reliably\",\r\n  \"remotely\",\r\n  \"responsively\",\r\n  \"robustly\",\r\n  \"scalably\",\r\n  \"securely\",\r\n  \"seamlessly\",\r\n  \"sequentially\",\r\n  \"smoothly\",\r\n  \"statically\",\r\n  \"synchronously\",\r\n  \"virtually\",\r\n  \"wirelessly\",\r\n];\r\n\r\nfunction random(arr: string[]): string {\r\n  return arr[Math.floor(Math.random() * arr.length)];\r\n}\r\n\r\nfunction longest(arr: string[]) {\r\n  return arr.reduce((a, b) => (a.length > b.length ? a : b));\r\n}\r\n\r\nfunction shortest(arr: string[]) {\r\n  return arr.reduce((a, b) => (a.length < b.length ? a : b));\r\n}\r\n\r\nexport interface Options {\r\n  separator?: string;\r\n  capitalize?: boolean;\r\n  adjectiveCount?: number;\r\n  addAdverb?: boolean;\r\n}\r\n\r\n/**\r\n * Returns the human-id\r\n *\r\n * @param {Options|string|boolean} [options = {}]\r\n * @returns {string}\r\n */\r\nexport function humanId(options: Options | string | boolean = {}): string {\r\n  if (typeof options === \"string\") options = { separator: options };\r\n  if (typeof options === \"boolean\") options = { capitalize: options };\r\n  const { separator = \"\", capitalize = true, adjectiveCount = 1, addAdverb = false } = options;\r\n\r\n  let res = [\r\n    ...[...Array(adjectiveCount)].map((_) => random(adjectives)),\r\n    random(nouns),\r\n    random(verbs),\r\n    ...(addAdverb ? [random(adverbs)] : []),\r\n  ];\r\n\r\n  if (capitalize) res = res.map((r) => r.charAt(0).toUpperCase() + r.substr(1));\r\n\r\n  return res.join(separator);\r\n}\r\n\r\n/**\r\n * Returns the pool size for a set of options\r\n *\r\n * @param {Options} [options = {}]\r\n * @returns {number}\r\n */\r\nexport function poolSize(options: Options = {}): number {\r\n  const { adjectiveCount = 1, addAdverb = false } = options;\r\n  return adjectives.length * adjectiveCount * nouns.length * verbs.length * (addAdverb ? adverbs.length : 1);\r\n}\r\n\r\n/**\r\n * Returns the max length for a set of options\r\n *\r\n * @param {Options} [options = {}]\r\n * @returns {number}\r\n */\r\nexport function maxLength(options: Options = {}): number {\r\n  const { adjectiveCount = 1, addAdverb = false, separator = \"\" } = options;\r\n  return (\r\n    longest(adjectives).length * adjectiveCount +\r\n    adjectiveCount * separator.length +\r\n    longest(nouns).length +\r\n    separator.length +\r\n    longest(verbs).length +\r\n    (addAdverb ? longest(adverbs).length + separator.length : 0)\r\n  );\r\n}\r\n\r\n/**\r\n * Returns the min length for a set of options\r\n *\r\n * @param {Options} [options = {}]\r\n * @returns {number}\r\n */\r\nexport function minLength(options: Options = {}): number {\r\n  const { adjectiveCount = 1, addAdverb = false, separator = \"\" } = options;\r\n  return (\r\n    shortest(adjectives).length * adjectiveCount +\r\n    adjectiveCount * separator.length +\r\n    shortest(nouns).length +\r\n    separator.length +\r\n    shortest(verbs).length +\r\n    (addAdverb ? shortest(adverbs).length + separator.length : 0)\r\n  );\r\n}\r\n\r\nexport default humanId;\r\n"],"names":[],"version":3,"file":"index.d.ts.map","sourceRoot":"../"}