{"mappings":"AAAA,OAAO,MAAM,YAAY,MAAM,EAM9B,CAAC;AAEF,OAAO,MAAM,OAAO,MAAM,EAkBzB,CAAC;AAEF,OAAO,MAAM,OAAO,MAAM,EAUzB,CAAC;AAEF,OAAO,MAAM,SAAS,MAAM,EAkC3B,CAAC;AAcF;IACE,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,UAAU,CAAC,EAAE,OAAO,CAAC;IACrB,cAAc,CAAC,EAAE,MAAM,CAAC;IACxB,SAAS,CAAC,EAAE,OAAO,CAAC;CACrB;AAQD,wBAAgB,OAAO,CAAC,OAAO,GAAE,OAAO,GAAG,MAAM,GAAG,OAAY,GAAG,MAAM,CAqBxE;AAQD,yBAAyB,OAAO,GAAE,OAAY,GAAG,MAAM,CAGtD;AAQD,0BAA0B,OAAO,GAAE,OAAY,GAAG,MAAM,CAQvD;AAQD,0BAA0B,OAAO,GAAE,OAAY,GAAG,MAAM,CAQvD;AAED,eAAe,OAAO,CAAC","sources":["index.ts"],"sourcesContent":["export const adjectives: string[] = [\n  \"afraid\", \"big\", \"better\", \"bright\", \"clear\", \"clever\", \"cold\", \"cool\", \"dark\",\n  \"deep\", \"dirty\", \"dry\", \"dull\", \"fast\", \"free\", \"fresh\", \"full\", \"green\", \"hot\",\n  \"huge\", \"light\", \"long\", \"modern\", \"neat\", \"new\", \"open\", \"public\", \"quick\",\n  \"ready\", \"sharp\", \"shiny\", \"short\", \"silent\", \"slick\", \"slow\", \"smart\", \"smooth\",\n  \"solid\", \"strong\", \"swift\", \"thin\", \"tough\", \"true\", \"vast\", \"wide\", \"wise\"\n];\n\nexport const nouns: string[] = [\n  \"algorithms\", \"applications\", \"archives\", \"arrays\", \"backends\", \"batteries\", \"binaries\", \"blocks\",\n  \"branches\", \"browsers\", \"buffers\", \"bytes\", \"cables\", \"caches\", \"cameras\", \"certificates\",\n  \"chips\", \"classes\", \"clouds\", \"clusters\", \"codes\", \"compilers\", \"components\", \"controllers\",\n  \"cores\", \"cryptos\", \"dashboards\", \"databases\", \"datasets\", \"devices\", \"displays\", \"domains\",\n  \"drivers\", \"emails\", \"engines\", \"extensions\", \"fields\", \"files\", \"folders\", \"functions\",\n  \"frameworks\", \"gateways\", \"generators\", \"graphs\", \"grids\", \"handles\", \"hardware\", \"headers\",\n  \"hosts\", \"indexes\", \"instances\", \"interfaces\", \"keys\", \"keywords\", \"libraries\", \"lines\",\n  \"links\", \"lists\", \"logs\", \"loops\", \"machines\", \"mails\", \"mainframes\", \"memories\", \"methods\",\n  \"microservices\", \"modules\", \"networks\", \"nodes\", \"objects\", \"operands\", \"operations\", \"options\",\n  \"outputs\", \"packets\", \"parameters\", \"parsers\", \"paths\", \"patterns\", \"pixels\", \"platforms\",\n  \"plugins\", \"ports\", \"processors\", \"programs\", \"projects\", \"proxies\", \"queries\", \"queues\",\n  \"records\", \"registries\", \"requests\", \"responses\", \"routers\", \"scripts\", \"sensors\", \"servers\",\n  \"services\", \"sessions\", \"settings\", \"signals\", \"sites\", \"software\", \"sources\", \"sockets\",\n  \"stacks\", \"standards\", \"storages\", \"streams\", \"strings\", \"structures\", \"subnets\", \"switches\",\n  \"systems\", \"tables\", \"tags\", \"tasks\", \"templates\", \"terminals\", \"tokens\", \"tools\", \"trees\",\n  \"types\", \"uploads\", \"urls\", \"users\", \"variables\", \"vectors\", \"views\", \"volumes\", \"websites\",\n  \"widgets\", \"windows\", \"workflows\", \"zones\"\n];\n\nexport const verbs: string[] = [\n  \"accept\", \"add\", \"allow\", \"analyze\", \"build\", \"calculate\", \"change\", \"check\",\n  \"click\", \"compile\", \"connect\", \"copy\", \"create\", \"debug\", \"delete\", \"design\",\n  \"develop\", \"download\", \"edit\", \"encode\", \"enter\", \"execute\", \"export\", \"fix\",\n  \"generate\", \"import\", \"install\", \"integrate\", \"invent\", \"join\", \"launch\",\n  \"load\", \"log\", \"make\", \"monitor\", \"move\", \"open\", \"optimize\", \"post\",\n  \"press\", \"program\", \"push\", \"read\", \"repair\", \"report\", \"reset\", \"restart\",\n  \"run\", \"save\", \"scan\", \"search\", \"select\", \"send\", \"setup\", \"share\",\n  \"start\", \"stop\", \"store\", \"stream\", \"switch\", \"sync\", \"test\", \"track\",\n  \"type\", \"update\", \"upload\", \"upgrade\", \"use\", \"view\", \"write\"\n];\n\nexport const adverbs: string[] = [\n  \"accurately\",\n  \"algorithmically\",\n  \"asynchronously\",\n  \"automatically\",\n  \"concurrently\",\n  \"consistently\",\n  \"dependably\",\n  \"digitally\",\n  \"dynamically\",\n  \"efficiently\",\n  \"fluently\",\n  \"intelligently\",\n  \"logically\",\n  \"modularly\",\n  \"optimally\",\n  \"parallelly\",\n  \"precisely\",\n  \"programmatically\",\n  \"promptly\",\n  \"rapidly\",\n  \"reliably\",\n  \"remotely\",\n  \"responsively\",\n  \"robustly\",\n  \"scalably\",\n  \"securely\",\n  \"seamlessly\",\n  \"sequentially\",\n  \"smoothly\",\n  \"statically\",\n  \"synchronously\",\n  \"virtually\",\n  \"wirelessly\"\n];\n\nfunction random(arr: string[]): string {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nfunction longest(arr: string[]) {\n  return arr.reduce((a, b) => a.length > b.length ? a : b);\n}\n\nfunction shortest(arr: string[]) {\n  return arr.reduce((a, b) => a.length < b.length ? a : b);\n}\n\nexport interface Options {\n  separator?: string;\n  capitalize?: boolean;\n  adjectiveCount?: number;\n  addAdverb?: boolean;\n}\n\n/**\n * Returns the human-id\n *\n * @param {Options|string|boolean} [options = {}]\n * @returns {string}\n */\nexport function humanId(options: Options | string | boolean = {}): string {\n  if (typeof options === \"string\") options = { separator: options };\n  if (typeof options === \"boolean\") options = { capitalize: options };\n  const {\n    separator = \"\",\n    capitalize = true,\n    adjectiveCount = 1,\n    addAdverb = false\n  } = options;\n\n  let res = [\n    ...[...Array(adjectiveCount)].map(_ => random(adjectives)),\n    random(nouns),\n    random(verbs),\n    ...((addAdverb) ? [random(adverbs)] : [])\n  ];\n\n  if (capitalize)\n    res = res.map(r => r.charAt(0).toUpperCase() + r.substr(1));\n\n  return res.join(separator);\n}\n\n/**\n * Returns the pool size for a set of options\n *\n * @param {Options} [options = {}]\n * @returns {number}\n */\nexport function poolSize(options: Options = {}): number {\n  const { adjectiveCount = 1, addAdverb = false } = options;\n  return (adjectives.length * adjectiveCount) * nouns.length * verbs.length * (addAdverb ? adverbs.length : 1);\n}\n\n/**\n * Returns the max length for a set of options\n *\n * @param {Options} [options = {}]\n * @returns {number}\n */\nexport function maxLength(options: Options = {}): number {\n  const { adjectiveCount = 1, addAdverb = false, separator = \"\" } = options;\n  return (longest(adjectives).length * adjectiveCount) +\n    (adjectiveCount * separator.length) +\n    longest(nouns).length +\n    separator.length +\n    longest(verbs).length +\n    (addAdverb ? longest(adverbs).length + separator.length : 0);\n}\n\n/**\n * Returns the min length for a set of options\n *\n * @param {Options} [options = {}]\n * @returns {number}\n */\nexport function minLength(options: Options = {}): number {\n  const { adjectiveCount = 1, addAdverb = false, separator = \"\" } = options;\n  return (shortest(adjectives).length * adjectiveCount) +\n    (adjectiveCount * separator.length) +\n    shortest(nouns).length +\n    separator.length +\n    shortest(verbs).length +\n    (addAdverb ? shortest(adverbs).length + separator.length : 0);\n}\n\nexport default humanId;"],"names":[],"version":3,"file":"index.d.ts.map","sourceRoot":"../"}